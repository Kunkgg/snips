priority -50

# Many of the snippets here use a global option called
# "g:ultisnips_java_brace_style" which, if set to "nl" will put a newline
# before '{' braces.
# Setting "g:ultisnips_java_junit" will change how the test method snippet
# looks, it is defaulted to junit4, setting this option to 3 will remove the
# @Test annotation from the method

# global python functions {{{1 #
global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal
# }}} #

# initial {{{1 #
snippet /i|n/ "new primitive or int" br
${1:int} ${2:i} = ${3:1};
$0
endsnippet

snippet /o|v/ "new Object or variable" br
${1:Object} ${2:var} = new $1($3);
endsnippet

snippet constant-string "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet constant "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet
# }}} #

# class {{{1 #
snippet main "method (main)" b
public static void main(String[] args)`!p nl(snip)`{
	$0
}
endsnippet

snippet cl "class" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet m  "method" b
${1:public} ${2:void} ${3:method}(${4:Type args}) {
	$0
}

endsnippet

snippet md "Method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""``!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws ${6:Exception} }{
	$0
}
endsnippet

snippet cl-extends "class extends" b
public class ${1:`!p
snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }${4:implements ${5:Interface} }{
	$0
}
endsnippet

snippet f "field" b
${1:private} ${2:String} ${3:fieldName`};
endsnippet

snippet abstract-class "abstract class" b
abstract class ${1:className} {
	${2://attributes and methods}
}

endsnippet

snippet abstract-method "abstract method" b
abstract ${1:void} ${2:methodName};
endsnippet

snippet interface "interface" b
interface ${1:`!p snip.rv = snip.basename or "untitled"`} ${2:extends ${3:Parent} }{
	$0
}
endsnippet

snippet cc "constructor call or setter body"
this.${1:var} = $1;
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet ex-anonymous-class "Example for anonymous class" b
class outerClass {

	// defining anonymous class
	object1 = new Type(parameterList) {
		// body of the anonymous class
	};
}
endsnippet


# }}} #

# assert {{{1 #
snippet assert "assert" b
assert ${1:test}${2/(.+)/(?1: \: ")/}${2:Failure message}${2/(.+)/(?1:")/};
endsnippet

snippet assert-true "assert true" b
assertTrue(${1:actual});
endsnippet

snippet assert-false "assert false" b
assertFalse(${1:actual});
endsnippet

snippet assert-equals "assert equals" b
assertEquals(${1:expected}, ${2:actual});
endsnippet
# 1}}} #

# control flow {{{1 #
snippet if "if" b
if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet el "else" w
else`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet
snippet switch "switch" b
switch ($1)`!p nl(snip)`{
	case $2: $0
}
endsnippet

snippet case "case" b
case $1:
	$2
$0
endsnippet
# 1}}} #

# loops {{{ #
snippet while "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet do-while "do-while" b
do {
	$0
} while ($1);
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet
# }}} loops #

# exception {{{1 #
snippet catch "catch" b
catch (${1:Exception} ${2:e})`!p nl(snip)`{
	$0
}
endsnippet

snippet try "try/catch" b
try {
	$1${VISUAL}
} catch(${2:Exception} ${3:e}){
	${4:e.printStackTrace();}
}

endsnippet

snippet try-finally "try/catch/finally" b
try {
	$1${VISUAL}
} catch (${2:Exception} ${3:e}) {
	${4:e.printStackTrace();}
} finally {
	${5:finally block}
}

endsnippet

snippet try-muti "try catch mutiple exception" b
try {
	$1${VISUAL}
} catch (${2:ExceptionType1} | ${3:ExceptionType2} ${4:e}) {
	${5:e.printStackTrace();}
}

endsnippet

snippet try-resource "try with resource" b
try (${1:resource declaration}) {
	${2:use of the resource}
} catch (${3:Exception} ${4:e}) {
	${5:e.printStackTrace();}
}

endsnippet

snippet throws "method throws" b
${1:accessModifier} ${2:void} ${3:methodName}(${4:args}) throws ${5:ExceptionType1, ExceptionType2 â€¦} {
	$0
}

endsnippet

snippet throw "throw" b
throw ${1:throwableObject};
endsnippet
# }}} #

# import {{{ #
snippet imt "import junit_framework_TestCase;"  b
import junit.framework.TestCase;
$0
endsnippet

snippet im "import"  b
import ${1:java}.${2:util}.$0;
endsnippet

snippet j.b "java_beans_" i
java.beans.
endsnippet

snippet j.i "java_io" i
java.io.
endsnippet

snippet j.m "java_math" i
java.math.
endsnippet

snippet j.n "java_net_" i
java.net.
endsnippet

snippet j.u "java_util_"  i
java.util.
endsnippet
# }}} import #

# collections {{{ #
snippet list "Collections List" b
${1:Array}List<${2:String}> ${3:listName} = new ${1:Array}List<$2>();
endsnippet

snippet iterator "new Iterator" b
Iterator<${1:Integer}> ${2:iterName} = ${3:objName}.iterator();
endsnippet
# }}} collections #

snippet pa "package" b
package $0
endsnippet

snippet p "print" b
System.out.print($1);$0
endsnippet

snippet pl "println"  b
System.out.println($1);$0
endsnippet

snippet pf "printlf"  b
System.out.printf($1);$0
endsnippet


# vim:ft=snippets:
