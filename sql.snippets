# A valid snippet should starts with:
#
#       snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#       endsnippet
#
# Snippet options:
#
#       b - Beginning of line.
#       i - In-word expansion.
#       w - Word boundary.
#       r - Regular expression
#       e - Custom context snippet
#       A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#       snippet emitter "emitter properties" b
#       private readonly ${1} = new Emitter<$2>()
#       public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#       endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

# create objects {{{ #
snippet createdb "create database" b
CREATE DATABASE IF NOT EXISTS ${1:database};
endsnippet

snippet dropdb "delete database" b
DROP DATABASE IF EXISTS ${1:database};
endsnippet

snippet createtable "create table" b
########################
# Create ${1:table_name} table
########################
CREATE TABLE IF NOT EXISTS ${1:table_name}(
${2:column_1_definition,
column_2_definition,
dict_id                int       NOT NULL AUTO_INCREMENT,
dict_name              char(50)  NOT NULL UNIQUE,
dict_type_id           int       NULL ,
dict_dbName            char(50)  NULL UNIQUE,
dict_size              int       DEFAULT 0,
dict_timestamp         TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
...,}
${3:table_constraints}
PRIMARY KEY (${4:dict_id})
) ENGINE=${5:InnoDB};
endsnippet

snippet column "definition column" b
${1:column_name} ${2:data_type}(${3:length}) ${4:[NOT NULL] [DEFAULT value] [AUTO_INCREMENT] column_constraint},
endsnippet

snippet primaryKey "primary key" b
PRIMARY KEY (${1:col1,col2,...})
endsnippet

snippet foreignKey "constraint foreign key" b
ALTER TABLE ${1:tableA} ADD CONSTRAINT fk_${1:tableA}_${2:tableB}
FOREIGN KEY (${3:foreignKey})
REFERENCES  ${2:tableB} (${3:foreignKey});
endsnippet
# }}} create objects #

snippet showtables "show table names" b
SHOW TABLES LIKE '%${1:keyword}%';
endsnippet

snippet showFk "show foreign keys" b
SELECT
    TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,
    REFERENCED_COLUMN_NAME
FROM
    INFORMATION_SCHEMA.KEY_COLUMN_USAGE
WHERE
    REFERENCED_TABLE_SCHEMA = '${1:database}' AND
    REFERENCED_TABLE_NAME = '${2:tableName}';
endsnippet

snippet select "a normal select" bw
SELECT ${1:columnlist}
FROM ${2:tableslist}
WHERE ${3:conditions}
endsnippet

snippet cte "common table expression" b
WITH ${1:cte_name} (${2:column_list}) AS (
${3:query}
)
SELECT ${4:column_list} FROM ${1:cte_name} WHERE ${5:conditions};

endsnippet

snippet cte-recursive "recursive common table expression" b
WITH RECURSIVE ${1:cte_name} AS (
    ${2:initial_query  -- anchor member}
    UNION ALL
    ${3:recursive_query -- recursive member that references to the CTE name}
)
SELECT ${4:column_list} FROM ${1:cte_name};
endsnippet

snippet union "union" b
UNION ${1:ALL}
endsnippet

snippet insert "insert a row into table" b
INSERT ${6:IGNORE} INTO ${1:table}(${2:c1,c2,...})
VALUES (${3:v1,v2,...});

endsnippet

snippet insert-multi "insert multiple rows into table" b
INSERT ${6:IGNORE} INTO ${1:table}(${2:c1,c2,...})
VALUES
    (${3:v1,v2,...}),
    (${4:v1,v2,...}),
    (${5:v1,v2,...});
endsnippet

snippet insert-select "insert with select subquery" b
INSERT ${6:IGNORE} INTO ${1:table_name}(${2:column_list})
SELECT
    ${3:select_column_list}
FROM
    ${4:another_table}
WHERE
    ${5:condition};
${condition}
${1:condition}
endsnippet

snippet update "update one or more rows" b
UPDATE ${5:LOW_PRIORITY} ${6:IGNORE} ${1:table_name}
SET
    ${2:column_name1 = expr1,}
    ${3:column_name2 = expr2,}
WHERE
    ${4:condition};
endsnippet

snippet delete "delete rows" b
DELETE FROM ${1:table_name}
WHERE ${2:condition};
endsnippet

snippet ondelete "on delete for foreignKey" bw
ON DELETE ${1:CASCADE}
endsnippet

snippet replace "replace row" b
REPLACE ${1:table_name}(${2:column_list})
VALUES(${3:value_list});
endsnippet

snippet replace-set "replace row with set syntax" b
REPLACE ${1:table_name}(${2:column_list})
SET ${3:column1} = ${4:value1},
    ${5:column2} = ${6:value2};
endsnippet

snippet preparedStmt "prepared statement" b
PREPARE ${1:pstmt} FROM
${2:'SELECT
        productCode,
        productName
    FROM products
    WHERE productCode = ?'};

SET @${3:varName} = ${4:value};

EXECUTE ${1:pstmt} USING @${3:varName};
endsnippet

snippet set-var "set variable" b
SET @${1:varName} = ${2:value};
endsnippet


# transaction {{{ #

snippet set-autocommit "set autocommit" b
SET autocommit = ${1:0};
endsnippet

snippet transaction "transaction" b
START TRANSACTION;

${1:queries of transaction}

COMMIT;

endsnippet

snippet rollback "rollback transaction" b
ROLLBACK;
endsnippet
# }}} transaction #

# lock and unlock table {{{ #
snippet lock-table "lock table" b
LOCK TABLES ${1:table_name} ${2:READ | WRITE};
endsnippet

snippet unlock "unlock table" b
UNLOCK TABLES;
endsnippet
# }}} lock and unlock table #

# SELECT
#   TABLE_NAME,COLUMN_NAME,CONSTRAINT_NAME, REFERENCED_TABLE_NAME,
#   REFERENCED_COLUMN_NAME
# FROM
#   INFORMATION_SCHEMA.KEY_COLUMN_USAGE
# WHERE
#   REFERENCED_TABLE_SCHEMA = 'dict';

# vim: ft=snippets:ts=4:sw=4:sts=4:expandtab:nocindent:smartindent:
